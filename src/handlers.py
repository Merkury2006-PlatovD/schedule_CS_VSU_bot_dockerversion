import os

import telebot
from telebot import TeleBot

from db_controller import DBController
from errors.errors import ScheduleParserFindError
from parser.excell_converter import ScheduleParser
from keyboard_generators import get_subgroup_keyboard, get_group_keyboard, get_course_keyboard, get_persistent_keyboard, \
    get_mistake_report_keyboard
import config


def register_handlers(bot: TeleBot, sch_parser: ScheduleParser):
    def set_bot_commands_menu():
        bot.set_my_commands([
            telebot.types.BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
            telebot.types.BotCommand("help", "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"),
            telebot.types.BotCommand("info", "–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ"),
            telebot.types.BotCommand("updateinfo", "–ü–æ–º–µ–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ"),
            telebot.types.BotCommand("mistake", "–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"),
            telebot.types.BotCommand("znam", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å"),
            telebot.types.BotCommand("chis", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —á–∏—Å–ª–∏—Ç–µ–ª—å")
        ])

    @bot.message_handler(commands=['start'])
    def handle_start(message):
        """
        –°–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "/start" –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ user_exists(user_id). –ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ–≥–æ –±–æ—Ç–∞.

        Args:
            message: —ç–∫–∑–µ–º–ø–ª—è—Ä telebot.types.Message.
        """
        set_bot_commands_menu()
        user_id = message.from_user.id
        bot.send_message(user_id,
                         f"–ù–µ–¥–µ–ª—è —Å–µ–π—á–∞—Å: {'—á–∏—Å–ª–∏—Ç–µ–ª—å' if DBController.get_current_week_type() == 0 else '–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å'}")
        if not DBController.user_exists(user_id):
            DBController.add_user(user_id)
            bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å:", reply_markup=get_course_keyboard())
        else:
            bot.send_message(user_id, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
            bot.send_message(user_id, "–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=get_persistent_keyboard())

    @bot.message_handler(commands=['updateinfo'])
    def handle_profile_update(message):
        """
        –°–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "/updateinfo" –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç/–∏–∑–º–µ–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ë–î.

        Args:
            message: —ç–∫–∑–µ–º–ø–ª—è—Ä telebot.types.Message.
        """
        user_id = message.from_user.id
        if not DBController.user_exists(user_id):
            DBController.add_user(user_id)
        bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å:", reply_markup=get_course_keyboard())

    @bot.message_handler(commands=['help'])
    def handle_help(message):
        """
        –°–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "/help" –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

        Args:
            message: —ç–∫–∑–µ–º–ø–ª—è—Ä telebot.types.Message.
        """
        bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º: \n"
                                               "‚Ä¢  –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã —è —É–∑–Ω–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ –∏ —Ç–≤–æ–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏\n"
                                               "‚Ä¢  –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /updateinfo, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ\n"
                                               "‚Ä¢  –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /info, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ\n"
                                               "‚Ä¢  –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /mistake, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏\n"
                                               "‚Ä¢  –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /znam, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å\n"
                                               "‚Ä¢  –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /chis, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —á–∏—Å–ª–∏—Ç–µ–ª—å")

    @bot.message_handler(commands=['info'])
    def handle_info(message):
        user_id = message.from_user.id
        course, group, subgroup = DBController.get_user_data(user_id)
        bot.send_message(message.from_user.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ: \n"
                                               f"–¢–≤–æ–π –∫—É—Ä—Å: {course}\n"
                                               f"–¢–≤–æ—è –≥—Ä—É–ø–ø–∞: {group}\n"
                                               f"–¢–≤–æ—è –ø–æ–¥–≥—Ä—É–ø–ø–∞: {subgroup}")

    @bot.message_handler(commands=['mistake'])
    def handle_mistake_report(message):
        bot.send_message(message.from_user.id,
                         "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ñ–∞–∫—Ç –æ—à–∏–±–∫–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏. –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –≤–∞—Å –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–º –ª–∏—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã!",
                         reply_markup=get_mistake_report_keyboard())

    # —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    @bot.message_handler(commands=['getDB'])
    def handle_database_request(message):
        if str(message.from_user.id) in [os.getenv("ADMIN_TG_ID1"), os.getenv("ADMIN_TG_ID2")]:
            try:
                with open(config.db_path, "rb") as db_file:
                    bot.send_document(message.from_user.id, db_file, caption="–í–æ—Ç —Ç–≤–æ—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö üìÇ")
            except FileNotFoundError:
                bot.reply_to(message, "–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω! ‚ùå")

    @bot.message_handler(commands=['getUsersPerDay'])
    def handle_users_per_day_request(message):
        bot.send_message(message.from_user.id, f"–ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å {DBController.get_users_per_day()}")

    @bot.message_handler(commands=['sendMessage'])
    def handle_send_message(message):
        if str(message.from_user.id) in [os.getenv("ADMIN_TG_ID1"), os.getenv("ADMIN_TG_ID2")]:
            args = message.text.split(maxsplit=2)
            if len(args) < 3:
                bot.reply_to(message, "‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sendMessage [id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] \"—Å–æ–æ–±—â–µ–Ω–∏–µ\"")
                return

            user_id = int(args[1])
            user_message = args[2]

            bot.send_message(user_id, user_message)
            bot.reply_to(message, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    @bot.message_handler(commands=['chis', 'znam'])
    def handle_chis_znam_shedule(message):
        user_id = message.from_user.id
        print(f"–ó–∞–ø—Ä–æ—Å –æ—Ç {user_id}: {message.from_user.username}")
        DBController.increment_users_per_day_cnt()

        if not DBController.user_exists(user_id):
            DBController.add_user(user_id)
            bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å:", reply_markup=get_course_keyboard())
        else:
            try:
                out_data_formated = f"–¢–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {"—á–∏—Å–ª–∏—Ç–µ–ª—å" if message.text == '/chis' else '–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å'}:\n\n"
                days_map = {"üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0, "üìÖ –í—Ç–æ—Ä–Ω–∏–∫": 1, "üìÖ –°—Ä–µ–¥–∞": 2, "üìÖ –ß–µ—Ç–≤–µ—Ä–≥": 3, "üìÖ –ü—è—Ç–Ω–∏—Ü–∞": 4,
                            "üìÖ –°—É–±–±–æ—Ç–∞": 5}
                course, group, subgroup = DBController.get_user_data(user_id)

                for key, val in days_map.items():
                    schedule = sch_parser.get_lessons_on_day(sch_parser.find_required_col(course, group, subgroup),
                                                             val, 0 if message.text == '/chis' else 1)
                    out_data_formated += f"üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ {key.split(' ')[-1]}:*\n\n"
                    for key_day, val_day in schedule.items():
                        if val_day is None or val_day.strip() == "":
                            val_day = "‚Äî –ù–µ—Ç –ø–∞—Ä—ã ‚Äî"
                        out_data_formated += f"üïí *{key_day}*\nüìñ {val_day}\n\n"

                bot.send_message(user_id, out_data_formated, parse_mode="Markdown")
            except (ScheduleParserFindError, TypeError, ValueError) as e:
                handle_error(user_id, e,
                             "–í–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å–∏–º –í–∞—Å –ø—Ä–æ—Å—Ç–æ –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ. –ú—ã —Å–¥–µ–ª–∞–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã —ç—Ç–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä–∏–ª–æ—Å—å.\n\n‚ùå –ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.\nüîç –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ.\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∏—Ö –µ—â–µ —Ä–∞–∑.")
                handle_profile_update(message)

    @bot.message_handler(
        func=lambda message: message.text not in ["üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "üìÖ –í—Ç–æ—Ä–Ω–∏–∫", "üìÖ –°—Ä–µ–¥–∞", "üìÖ –ß–µ—Ç–≤–µ—Ä–≥", "üìÖ –ü—è—Ç–Ω–∏—Ü–∞",
                                                  "üìÖ –°—É–±–±–æ—Ç–∞"])
    def handle_error_message(message):
        user_id = message.from_user.id
        bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏–ª–∏ /help –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

    @bot.message_handler(
        func=lambda message: message.text in ["üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "üìÖ –í—Ç–æ—Ä–Ω–∏–∫", "üìÖ –°—Ä–µ–¥–∞", "üìÖ –ß–µ—Ç–≤–µ—Ä–≥", "üìÖ –ü—è—Ç–Ω–∏—Ü–∞",
                                              "üìÖ –°—É–±–±–æ—Ç–∞"])
    def handle_schedule_request(message):
        days_map = {"üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0, "üìÖ –í—Ç–æ—Ä–Ω–∏–∫": 1, "üìÖ –°—Ä–µ–¥–∞": 2, "üìÖ –ß–µ—Ç–≤–µ—Ä–≥": 3, "üìÖ –ü—è—Ç–Ω–∏—Ü–∞": 4, "üìÖ –°—É–±–±–æ—Ç–∞": 5}
        user_id = message.from_user.id
        print(f"–ó–∞–ø—Ä–æ—Å –æ—Ç {user_id}: {message.from_user.username}")
        DBController.increment_users_per_day_cnt()
        day = days_map[message.text]
        try:
            week_type = DBController.get_current_week_type()
            course, group, subgroup = DBController.get_user_data(user_id)
            schedule = sch_parser.get_lessons_on_day(sch_parser.find_required_col(course, group, subgroup),
                                                     day, week_type)
            out_data_formated = f"üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ {message.text.split(' ')[-1]}/{'—á–∏—Å–ª' if week_type == 0 else '–∑–Ω–∞–º'}:*\n\n"

            for key, val in schedule.items():
                if val is None or val.strip() == "":
                    val = "‚Äî –ù–µ—Ç –ø–∞—Ä—ã ‚Äî"

                out_data_formated += f"üïí *{key}*\nüìñ {val}\n\n"

            bot.send_message(user_id, out_data_formated, parse_mode="Markdown")
        except (ScheduleParserFindError, TypeError, ValueError) as e:
            handle_error(user_id, e,
                         "–í–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å–∏–º –í–∞—Å –ø—Ä–æ—Å—Ç–æ –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ. –ú—ã —Å–¥–µ–ª–∞–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã —ç—Ç–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä–∏–ª–æ—Å—å.\n\n‚ùå –ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.\nüîç –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ.\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∏—Ö –µ—â–µ —Ä–∞–∑.")
            handle_profile_update(message)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("course_"))
    def handle_course(call):
        user_id = call.from_user.id
        course = int(call.data.split("_")[1])

        DBController.update_user(user_id, "course", course)
        keyboard = get_group_keyboard()
        bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É:", reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("group_"))
    def handle_group(call):
        user_id = call.from_user.id
        group = int(call.data.split("_")[1])

        DBController.update_user(user_id, "group_num", group)
        keyboard = get_subgroup_keyboard()
        bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –ø–æ–¥–≥—Ä—É–ø–ø—É:", reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("subgroup_"))
    def handle_subgroup(call):
        user_id = call.from_user.id
        subgroup = int(call.data.split("_")[-1])

        DBController.update_user(user_id, "subgroup", subgroup)
        bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        bot.send_message(user_id, "–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=get_persistent_keyboard())

    @bot.callback_query_handler(func=lambda call: call.data.startswith("mistake"))
    def handle_report_send(call):
        if call.data.split("_")[-1] == "1":
            course, group, subgroup = DBController.get_user_data(call.from_user.id)
            bot.send_message(5109041126,
                             f"–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —É –∫—É—Ä—Å: {course}, –≥—Ä—É–ø–ø–∞: {group}, –ø–æ–¥–≥—Ä—É–ø–ø–∞: {subgroup} –æ—Ç {call.from_user.username} c id {call.from_user.id}")
            print(
                f"–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —É –∫—É—Ä—Å: {course}, –≥—Ä—É–ø–ø–∞: {group}, –ø–æ–¥–≥—Ä—É–ø–ø–∞: {subgroup} –æ—Ç {call.from_user.username} c id {call.from_user.id}")
            bot.send_message(call.from_user.id,
                             "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∂–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –∏ –º–æ–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        else:
            bot.send_message(call.from_user.id, "–†–∞–¥—ã, —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ)")

    def handle_error(user_id, error_log, error_text=""):
        error_text = f"‚ö†Ô∏è–û—à–∏–±–∫–∞‚ö†Ô∏è\n\n{error_text}\n\n{error_log}"
        bot.send_message(user_id, error_text)
